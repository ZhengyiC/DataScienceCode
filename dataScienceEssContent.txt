02_01_begin:
	pd series and df construction
	data selection, retrieve, compare and setting in seri and df 
02_02:
	figure out, fill, count and drop Nan values in a DF obj
02_03:
	drop duplicates (drop rows) for rows that contains elements that are duplicates of previous rows' element in the same column index 
02_04:
	concate df obj by row and by col (concat, join and append functions)
		cat with index intact or changed 
	drop rows and columns
	sort by columns 
02_05:
	read csv files with pd function and add col names 
	create sub group obj 
		cal mean values of other variables for each group

Chapter 04 Visualization 

#1:
	make line, pie and bar charts from matplotlib.pyplt and pd objs
#2:
	create fig and axis obj
	set axis limit and ticks
	create subplots 
#3:
	plot styles: marker, line style, color theme, bar width
#4:
	x,y axis labels, pie chart region label (list), 
#5:
	make time series plot 
	read from csv, parse_dates set True, index variables by a specific column 
	use df obj's plot function to make matplotlib plots 
#6:
	histogram, scatter plot, boxplot and pairplots using seaborn, pandas and plt 

Chapter 05 Math and Statistics 
	
#1, #2:
	element-wise arithmetics
	mtrix element-wise multiplicatoin and division
	dot product
	set print precision (digit after decimal)
#3:
	output important descriptive statistics: mean, median, count, sum, max, max index, 
	calc the statistics along rows or columns
	for spread: stdev, variance 
	or generate all important statistics: dfObj.describe()
#4: 
	create categorical datatype and add to the df obj
	group by a certain var and gen the statistical summaries 
	crosstab table
#5:
	pearson correlation calc between variables 
	pearson test application and requirements 
	corr() mth to shortcut compute pearson coeff between several varis
	heatmap to show correlations 
#6
	find correlation between ordinal variables 
	spearman rank coeff
	chi-square test 
#7 (transformation)
	normalizaing observations values between a certain range
		use sklearn's prepossesing() mth
	standardizing values to mean=0, stdev = 1 
		use sklean's scale() mth
#8
	detect outlier using df.boxplot() method 
		print out the plot and visually observe if outliers present
	calculate outliers from dfobj.describe() mth
#9 
	multivariate outlier detection
	use pairplot and hue arg to print a category with variables differeciated by colors 
	